// Code generated by MockGen. DO NOT EDIT.
// Source: /home/selmant/trendyol-go/scripts/../internal/input/input.go

// Package mock_input is a generated GoMock package.
package mock_input

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/selmant/anagram-finder-trendyol/app/config"
	input "github.com/selmant/anagram-finder-trendyol/internal/input"
)

// MockDataReader is a mock of DataReader interface.
type MockDataReader struct {
	ctrl     *gomock.Controller
	recorder *MockDataReaderMockRecorder
}

// MockDataReaderMockRecorder is the mock recorder for MockDataReader.
type MockDataReaderMockRecorder struct {
	mock *MockDataReader
}

// NewMockDataReader creates a new mock instance.
func NewMockDataReader(ctrl *gomock.Controller) *MockDataReader {
	mock := &MockDataReader{ctrl: ctrl}
	mock.recorder = &MockDataReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataReader) EXPECT() *MockDataReaderMockRecorder {
	return m.recorder
}

// Lines mocks base method.
func (m *MockDataReader) Lines(ctx context.Context) <-chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lines", ctx)
	ret0, _ := ret[0].(<-chan string)
	return ret0
}

// Lines indicates an expected call of Lines.
func (mr *MockDataReaderMockRecorder) Lines(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lines", reflect.TypeOf((*MockDataReader)(nil).Lines), ctx)
}

// Prepare mocks base method.
func (m *MockDataReader) Prepare(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockDataReaderMockRecorder) Prepare(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockDataReader)(nil).Prepare), ctx)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// CreateReader mocks base method.
func (m *MockFactory) CreateReader(cfg *config.Config) (input.DataReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReader", cfg)
	ret0, _ := ret[0].(input.DataReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReader indicates an expected call of CreateReader.
func (mr *MockFactoryMockRecorder) CreateReader(cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReader", reflect.TypeOf((*MockFactory)(nil).CreateReader), cfg)
}
